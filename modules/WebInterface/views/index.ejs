<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <style>
        .alert-fixed {
            width: 100%;
            z-index: 1050;
            display: none;
        }
        .container.mt-4 {
            transition: margin-top 0.3s;
            text-align: center;
        }
        .navbar-nav {
            width: 100%;
            justify-content: center;
        }
        .nav-link {
            margin: 0 5px;
            border-radius: 5px;
            transition: background-color 0.3s, transform 0.3s;
        }
        .nav-link:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        }
        h1.mb-4 {
            margin-bottom: 1rem;
        }
        .github-button {
            position: fixed;
            bottom: 20px;
            right: 20px;
            font-size: 24px;
        }
    </style>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.1/css/all.min.css">
</head>
<body>

<div id="connectionStatus" class="alert alert-danger alert-fixed">
    Connection lost to server...
</div>

<div class="container mt-4">
    <h1 class="mb-4"><%= title %></h1>
    <nav class="navbar navbar-expand-lg navbar-light bg-light">
        <div class="collapse navbar-collapse" id="navbarNav">
            <ul class="navbar-nav">
                <% if (!isAuthenticated) { %>
                    <li class="nav-item">
                        <a class="nav-link btn btn-primary" href="/login">Login</a>
                    </li>
                <% } else { %>
                    <li class="nav-item">
                        <a class="nav-link btn btn-success" href="/logout">Logout</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link btn btn-info" href="/users">Users</a>
                    </li>
                <% } %>
            </ul>
        </div>
    </nav>
    <table class="table table-striped">
        <thead>
        <tr>
            <th scope="col">Callsign</th>
            <th scope="col">Node</th>
            <th scope="col">Via</th>
            <th scope="col">Location</th>
            <th scope="col">Frequency</th>
            <% if (isAuthenticated) {%>
                <th scope="col">Actions</th>
            <% } %>
        </tr>
        </thead>
        <tbody id="events"></tbody>
    </table>
</div>

<a href="https://github.com/firealarmss/AllstarHubMonitor" target="_blank" class="btn btn-dark github-button">
    <i class="fab fa-github"></i> GitHub
</a>

<script src="/socket.io/socket.io.js"></script>
<script>
    const socket = io();

    const isAuthenticated = "<%= JSON.stringify(isAuthenticated) %>";

    const connectionStatusDiv = document.getElementById('connectionStatus');
    const mainContainer = document.querySelector('.container.mt-4');

    let lastKeyedTime = {};

    socket.on('connect', function () {
        console.log('Socket connected.');
        connectionStatusDiv.style.display = 'none';
        mainContainer.style.marginTop = '1.5rem';
    });

    socket.on('disconnect', function () {
        console.log('Socket disconnected.');
        connectionStatusDiv.style.display = 'inline-block';
        mainContainer.style.marginTop = '3rem';
    });

    socket.on('node_key', function(data) {
        processEvent(data);
    });

    socket.on('initial_key_up_events', function(events) {
        console.log('Initial key up events:', events);
        events.forEach(event => {
            processEvent(event, true);
        });
    });

    socket.on('disconnect_ack', function({ nodeId }) {
        const rows = document.querySelectorAll(`tr[data-node="${nodeId}"]`);
        rows.forEach(row => {
            row.classList.add('text-muted');
            row.style.textDecoration = 'line-through';
            const disconnectButton = row.querySelector('.disconnect-button');
            if (disconnectButton) {
                disconnectButton.textContent = 'Disconnected';
                disconnectButton.disabled = true;
            }
        });
    });

    function processEvent(data, initial = false) {
        const configNodes = JSON.stringify(data.config.map(node => node.nodeNumber)).replace(/"/g, "'");

        const eventIdentifier = `${data.node}-${data.state}`;

        const now = Date.now();

        if (configNodes.includes(data.node.toString()) || data.via.toString() === data.node) {
            //console.debug('Event skipped:', data);
            return;
        }

        if (data.state === 'Keyed' && (!lastKeyedTime[eventIdentifier] || now - lastKeyedTime[eventIdentifier] > 2000) && !initial) {
            logEvent(data);
            lastKeyedTime[eventIdentifier] = now;
        } else if (initial) {
            logEvent(data)
        }

        if ((data.state === 'Keyed' || data.state === 'Unkeyed') && !initial) {
            manageHighlight(data.node, data.state === 'Keyed');
        }
    }

    function logEvent(data) {
        const tableBody = document.getElementById('events');
        const row = tableBody.insertRow(0);
        row.setAttribute('data-node', data.node);
        console.log(data);
        row.innerHTML = `
            <td>${data.callsign}</td>
            <td>${data.node}</td>
            <td>${data.via || 'N/A'}</td>
            <td>${data.location}</td>
            <td>${data.frequency || 'N/A'}</td>
            <% if (isAuthenticated) { %>
                <td>
                    <button class="btn btn-warning btn-sm disconnect-button" onclick="disconnectNode('${data.node}', '${data.via}')">Disconnect</button>
                </td>
            <% } %>
        `;
    }

    function manageHighlight(nodeId, isKeyed) {
        document.querySelectorAll(`tr[data-node="${nodeId}"]`).forEach(row => {
            if (isKeyed) {
                row.classList.add('table-success');
            } else {
                row.classList.remove('table-success');
            }
        });
    }

    function disconnectNode(nodeId, via, buttonElement) {
        if (!isAuthenticated || !isAuthenticated.username) {
            alert('You must be logged in to perform this action.');
            return;
        }

        console.log("Disconnect node:", nodeId, "via:", via);

        socket.emit('disconnect_node', {
            targetNode: nodeId,
            sourceNode: via,
            username: isAuthenticated.username
        });

        if (buttonElement) {
            buttonElement.disabled = true;
            buttonElement.textContent = 'Disconnecting...';
        }
    }

    function blockNode(nodeId) {
        console.log("Block node:", nodeId);
    }
</script>

<script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.5.2/dist/umd/popper.min.js"></script>
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
</body>
</html>
