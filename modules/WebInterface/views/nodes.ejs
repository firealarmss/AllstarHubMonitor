<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title><%= title %></title>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    <style>
        .node-container {
            margin-bottom: 20px;
        }

        .alert-fixed {
            width: 100%;
            z-index: 1050;
            display: none;
        }
        .container.mt-4 {
            transition: margin-top 0.3s;
        }
    </style>
    <script src="/socket.io/socket.io.js"></script>
</head>
<body>

<div id="connectionStatus" class="alert alert-danger alert-fixed">
    Connection lost to server...
</div>

<div class="container mt-4">

    <h1 class="mb-4"><%= title %></h1>
    <% nodes.forEach(function(node) { %>
        <div class="node-container">
            <div class="card">
                <div class="card-header">
                    Node <%= node.nodeNumber %>
                </div>
                <div class="card-body">
                    <table class="table">
                        <thead>
                        <tr>
                            <th>Callsign</th>
                            <th>Node</th>
                            <th>Location</th>
                            <th>Frequency</th>
                            <th>State</th>
                            <% if (isAuthenticated) {%>
                                <th>Action</th>
                            <% } %>
                        </tr>
                        </thead>
                        <tbody id="node<%= node.nodeNumber %>-body">
                        </tbody>
                    </table>
                    <div class="action-buttons">
                        <% if (isAuthenticated) {%>
                            <button class="btn btn-primary connect-node" data-toggle="modal" data-target="#connectNodeModal" data-node="<%= node.node %>" data-via="<%= node.via %>">Connect</button>
                        <% } %>
                    </div>
                </div>
            </div>
        </div>
    <% }); %>
</div>

<div class="modal fade" id="connectNodeModal" tabindex="-1" role="dialog" aria-labelledby="connectNodeModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="connectNodeModalLabel">Connect to Node</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <form id="connectNodeForm">
                <div class="modal-body">
                    <input type="hidden" name="sourceNode" id="sourceNode" value="f">
                    <div class="form-group">
                        <label for="targetNode">Target Node Number</label>
                        <input type="text" class="form-control" id="targetNode" name="targetNode" placeholder="Node Number">
                    </div>
                    <div class="form-group">
                        <label for="connectionType">Connection Type</label>
                        <select class="form-control" id="connectionType" name="connectionType">
                            <option value="permanent">Permanent</option>
                            <option value="default">Default</option>
                        </select>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                    <button type="submit" class="btn btn-success">Connect</button>
                </div>
            </form>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', () => {
        const socket = io();

        let isAuthenticated;

        <% if (typeof isAuthenticated !== 'undefined' && isAuthenticated) { %>
            const authJson = '<%- JSON.stringify(isAuthenticated).replace(/\\/g, "\\\\").replace(/"/g, '\\"') %>';
            isAuthenticated = JSON.parse(authJson);

            console.log('Is authenticated:', isAuthenticated);
            console.log('User:', isAuthenticated.username || 'N/A');
        <% } else { %>
            isAuthenticated = null;
            console.log('Is authenticated:', isAuthenticated);
        <% } %>

        const connectionStatusDiv = document.getElementById('connectionStatus');
        const mainContainer = document.querySelector('.container.mt-4');

        socket.on('connect', function () {
            console.log('Socket connected.');
            connectionStatusDiv.style.display = 'none';
            mainContainer.style.marginTop = '1.5rem';
        });

        socket.on('disconnect', function () {
            console.log('Socket disconnected.');
            connectionStatusDiv.style.display = 'inline-block';
            mainContainer.style.marginTop = '3rem';
        });


        socket.on('connected_nodes', function (nodes) {
            nodes.forEach((node, index) => {
                const tableBody = document.querySelector(`#node${node.via}-body`);
                if (!tableBody) {
                    console.error(`Table body not found for node via ${node.via}`);
                    return;
                }

                if (node.node === node.via.toString()) {
                    console.debug(`Ignoring self connection ${node}`);
                    return;
                }

                const rowId = `node-${node.node}-via-${node.via}`;
                let row = document.getElementById(rowId);

                if (!row) {
                    row = tableBody.insertRow();
                    row.id = rowId;
                    const stateClass = node.state === 'Keyed' ? 'badge-success' : 'badge-secondary';
                    row.innerHTML = `
                        <td>${node.callsign || 'N/A'}</td>
                        <td>${node.node}</td>
                        <td>${node.location || 'N/A'}</td>
                        <td>${node.frequency || 'N/A'}</td>
                        <td><span class="badge ${stateClass}" id="state-${node.node}">${node.state}</span></td>
                        <% if (isAuthenticated) {%>
                            <td><button class="btn btn-warning btn-sm" onclick="disconnectNode('${node.node}', '${node.via}')">Disconnect</button></td>
                        <% } %>
                    `;
                } else {
                    const stateSpan = document.getElementById(`state-${node.node}`);
                    if (stateSpan && stateSpan.textContent !== node.state) {
                        stateSpan.textContent = node.state;
                        stateSpan.className = `badge ${node.state === 'Keyed' ? 'badge-success' : 'badge-secondary'}`;
                    }
                }

                const isLastNode = index === nodes.length - 1;
                console.log(`Processing node ${node.node} with state ${node.state}`, isLastNode ? "Last node in the list" : "");
            });

        });

        window.disconnectNode = function (nodeId, via) {
            console.log(`Requesting disconnect for node ${nodeId} from ${via}`);

            socket.emit('disconnect_node', {
                targetNode: nodeId,
                sourceNode: via,
                username: isAuthenticated.username
            });
        };

        document.querySelectorAll('.kick-node').forEach(button => {
            button.addEventListener('click', function() {
                const node = this.getAttribute('data-node');
                console.log(`Kick/Block node ${node}`);
            });
        });

        document.querySelectorAll('.connect-node').forEach(button => {
            button.addEventListener('click', function() {
                const sourceNode = this.getAttribute('data-via');
                const finalSourceNode = sourceNode ? sourceNode : this.getAttribute('data-node');
                document.getElementById('sourceNode').value = finalSourceNode;
                $('#connectNodeModal').modal('show');
            });
        });

        document.getElementById('connectNodeForm').addEventListener('submit', function(event) {
            event.preventDefault();
            const formData = new FormData(this);
            const sourceNode = formData.get('sourceNode');
            const targetNode = formData.get('targetNode');
            const connectionType = formData.get('connectionType');

            console.log(`Requesting to connect node ${sourceNode} to ${targetNode} as ${connectionType}`);

            socket.emit('connect_node', {
                sourceNode: sourceNode,
                targetNode: targetNode,
                connectionType: connectionType
            });

            $('#connectNodeModal').modal('hide');
        });
    });
</script>

<script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.5.2/dist/umd/popper.min.js"></script>
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
</body>
</html>